const axios = require('axios');
const jwt = require('jsonwebtoken');
const Service = require('../../models/Service');
const Order = require('../../models/Order');
const HistoryUser = require('../../models/HistoryUser');
const User = require('../../models/User');
const SmmSv = require("../../models/SmmSv");

/* H√†m l·∫•y danh s√°ch d·ªãch v·ª• */
exports.getServices = async (req, res) => {
    try {
        const { key } = req.body;


        // Ki·ªÉm tra xem token c√≥ ƒë∆∞·ª£c g·ª≠i kh√¥ng
        if (!key) {
            return res.status(400).json({ success: false, message: "Token kh√¥ng ƒë∆∞·ª£c b·ªè tr·ªëng" });
        }

        // X√°c th·ª±c token
        let decoded;
        try {
            decoded = jwt.verify(key, "secretKey");
        } catch (err) {
            return res.status(401).json({ success: false, message: "Token kh√¥ng h·ª£p l·ªá" });
        }

        // Ki·ªÉm tra tr·∫°ng th√°i ng∆∞·ªùi d√πng trong CSDL (v√≠ d·ª•: 'active')
        const user = await User.findById(decoded.userId);
        if (!user) {
            return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });
        }
        if (user.status && user.status !== 'active') {
            return res.status(403).json({ success: false, message: "Ng∆∞·ªùi d√πng kh√¥ng ho·∫°t ƒë·ªông" });
        }

        // L·∫•y danh s√°ch d·ªãch v·ª• t·ª´ CSDL
        const services = await Service.find();
        // ƒê·ªãnh d·∫°ng c√°c tr∆∞·ªùng c·∫ßn hi·ªÉn th·ªã
        const formattedServices = services.map(service => ({
            service: service.Magoi,
            name: service.name,
            type: service.type,
            category: service.category,
            rate: service.rate,
            min: service.min,
            max: service.max,
            cancel: service.isActive,
        }));

        return res.status(200).json(formattedServices);
    } catch (error) {
        console.error("L·ªói khi l·∫•y danh s√°ch d·ªãch v·ª•:", error);
        return res.status(500).json({
            success: false,
            message: 'L·ªói khi l·∫•y danh s√°ch d·ªãch v·ª•',
            error: error.message
        });
    }
};

exports.AddOrder = async (req, res) => {
    // L·∫•y token t·ª´ req.body
    const { key, link, quantity, service, comments } = req.body;
    const magoi = service;

    // Ki·ªÉm tra token c√≥ ƒë∆∞·ª£c g·ª≠i kh√¥ng
    if (!key) {
        return res.status(400).json({ message: 'Token kh√¥ng ƒë∆∞·ª£c b·ªè tr·ªëng' });
    }

    // X√°c th·ª±c token
    let decoded;
    try {
        decoded = jwt.verify(key, "secretKey");
    } catch (err) {
        return res.status(401).json({ message: 'Token h·∫øt h·∫°n ho·∫∑c kh√¥ng h·ª£p l·ªá' });
    }

    // So s√°nh username trong token v√† trong body
    // const tokenUsername = decoded.username;
    // if (username !== tokenUsername) {
    //     return res.status(403).json({ message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán h√†nh ƒë·ªông n√†y' });
    // }
    const username = decoded.username
    const qty = Number(quantity);
    const formattedComments = comments ? comments.replace(/\r?\n/g, "\r\n") : "";

    try {
        // --- B∆∞·ªõc 1: L·∫•y th√¥ng tin d·ªãch v·ª• t·ª´ CSDL ---
        const serviceFromDb = await Service.findOne({ Magoi: magoi });
        if (!serviceFromDb) {
            return res.status(400).json({ message: 'D·ªãch v·ª• kh√¥ng t·ªìn t·∫°i' });
        }
        // console.log("Service from DB:", serviceFromDb);

        // --- L·∫•y c·∫•u h√¨nh API t·ª´ CSDL ---
        const smmSvConfig = await SmmSv.findOne({ name: serviceFromDb.DomainSmm });
        if (!smmSvConfig || !smmSvConfig.url_api || !smmSvConfig.api_token) {
            return res.status(500).json({ message: 'L·ªói khi mua d·ªãch v·ª•, vui l√≤ng ib admin' });
        }
        // console.log("SMM Config:", smmSvConfig);

        // --- B∆∞·ªõc 2: G·ª≠i y√™u c·∫ßu l·∫•y th√¥ng tin d·ªãch v·ª• t·ª´ API b√™n th·ª© 3 ---
        const serviceResponse = await axios.post(smmSvConfig.url_api, {
            key: smmSvConfig.api_token,
            action: 'services',
        });

        if (!serviceResponse.data || !Array.isArray(serviceResponse.data)) {
            return res.status(400).json({ message: 'Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu d·ªãch v·ª•' });
        }
        const serviceFromApi = serviceResponse.data.find(
            service => service.service === Number(serviceFromDb.serviceId)
        );
        if (!serviceFromApi) {
            return res.status(400).json({ message: 'D·ªãch v·ª• kh√¥ng t·ªìn t·∫°i' });
        }

        // T√≠nh t·ªïng chi ph√≠ v√† l√†m tr√≤n 2 s·ªë th·∫≠p ph√¢n
        const totalCost = parseFloat((serviceFromDb.rate * qty).toFixed(2));

        if (serviceFromApi.rate > serviceFromDb.rate) {
            return res.status(400).json({ message: 'L·ªói khi mua d·ªãch v·ª•, vui l√≤ng ib admin' });
        }

        // --- B∆∞·ªõc 3: Ki·ªÉm tra s·ªë d∆∞ t√†i kho·∫£n c·ªßa ng∆∞·ªùi d√πng ---
        const user = await User.findOne({ username });
        if (!user) {
            return res.status(400).json({ message: 'Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i' });
        }
        if (qty < serviceFromDb.min) {
            return res.status(400).json({ message: 'S·ªë l∆∞·ª£ng v∆∞·ª£t qu√° gi·ªõi h·∫°n' });
        }
        if (qty > serviceFromDb.max) {
            return res.status(400).json({ message: 'S·ªë l∆∞·ª£ng v∆∞·ª£t qu√° gi·ªõi h·∫°n' });
        }
        const currentBalance = parseFloat(user.balance.toFixed(2));
        if (currentBalance < totalCost) {
            return res.status(400).json({ message: 'S·ªë d∆∞ kh√¥ng ƒë·ªß ƒë·ªÉ th·ª±c hi·ªán giao d·ªãch' });
        }

        // --- B∆∞·ªõc 4: G·ª≠i y√™u c·∫ßu mua d·ªãch v·ª• qua API b√™n th·ª© 3 ---
        const purchasePayload = {
            key: smmSvConfig.api_token,
            action: 'add',
            link,
            quantity: qty,
            service: serviceFromDb.serviceId,
            comments: formattedComments,
        };

        const purchaseResponse = await axios.post(smmSvConfig.url_api, purchasePayload);
        if (!purchaseResponse.data || purchaseResponse.data.error) {
            return res.status(400).json({
                message: 'L·ªói khi mua d·ªãch v·ª•, vui l√≤ng ib admin',
                error: purchaseResponse.data?.error
            });
        }
        const tiencu = user.balance;

        // --- B∆∞·ªõc 5: Tr·ª´ s·ªë ti·ªÅn v√†o t√†i kho·∫£n ng∆∞·ªùi d√πng ---
        const newBalance = parseFloat((currentBalance - totalCost).toFixed(2));
        user.balance = newBalance;
        await user.save();

        // --- B∆∞·ªõc 6: T·∫°o m√£ ƒë∆°n (Madon) ---
        const lastOrder = await Order.findOne({}).sort({ Madon: -1 });
        const newMadon = lastOrder && lastOrder.Madon ? Number(lastOrder.Madon) + 1 : 10000;

        // --- B∆∞·ªõc 7: T·∫°o ƒë·ªëi t∆∞·ª£ng ƒë∆°n h√†ng v√† l∆∞u v√†o CSDL ---
        const createdAt = new Date();
        const orderData = new Order({
            Madon: newMadon,
            username,
            orderId: purchaseResponse.data.order,
            namesv: serviceFromDb.name,
            category: serviceFromDb.category,
            link,
            start: purchaseResponse.data.start_count || 0,
            quantity: qty,
            rate: parseFloat(serviceFromDb.rate.toFixed(2)),
            totalCost,
            createdAt,
            status: purchaseResponse.data.status || 'Pending',
            note: "",  // G√°n m·∫∑c ƒë·ªãnh l√† chu·ªói r·ªóng khi kh√¥ng c√≥ note
            comments: formattedComments,
        });

        const HistoryData = new HistoryUser({
            username,
            madon: newMadon,
            hanhdong: 'T·∫°o ƒë∆°n h√†ng',
            link,
            tienhientai: tiencu,
            tongtien: totalCost,
            tienconlai: newBalance,
            createdAt,
            mota: 'TƒÉng ' + serviceFromDb.name + ' th√†nh c√¥ng cho uid ' + link,
        });

        console.log('Order:', orderData);
        console.log('History:', HistoryData);

        await orderData.save();
        await HistoryData.save();

        console.log('Order saved successfully!');

        // --- B∆∞·ªõc 8: G·ª≠i th√¥ng b√°o v·ªÅ Telegram ---
        const telegramBotToken = process.env.TELEGRAM_BOT_TOKEN;
        const telegramChatId = process.env.TELEGRAM_CHAT_ID;
        if (telegramBotToken && telegramChatId) {
            const telegramMessage = `üìå *ƒê∆°n h√†ng m·ªõi ƒë√£ ƒë∆∞·ª£c t·∫°o!*\n\n` +
                `üë§ *Kh√°ch h√†ng:* ${username}\n` +
                `üîπ *D·ªãch v·ª•:* ${serviceFromDb.name}\n` +
                `üîó *Link:* ${link}\n` +
                `üìå *S·ªë l∆∞·ª£ng:* ${qty}\n` +
                `üí∞ *TI·ªÅn c≈©:* ${tiencu.toLocaleString()} VNƒê\n` +
                `üí∞ *T·ªïng ti·ªÅn:* ${totalCost.toLocaleString()} VNƒê\n` +
                `üí∞ *TI·ªÅn c√≤n l·∫°i:* ${newBalance.toLocaleString()} VNƒê\n` +
                `üÜî *M√£ ƒë∆°n:* ${newMadon}\n` +
                `üìÜ *Ng√†y t·∫°o:* ${createdAt.toLocaleString()}\n` +
                `üìù *Ghi ch√∫:* ${'Kh√¥ng c√≥'}`;

            try {
                await axios.post(`https://api.telegram.org/bot${telegramBotToken}/sendMessage`, {
                    chat_id: telegramChatId,
                    text: telegramMessage,
                });
                console.log('Th√¥ng b√°o Telegram ƒë√£ ƒë∆∞·ª£c g·ª≠i.');
            } catch (telegramError) {
                console.error('L·ªói g·ª≠i th√¥ng b√°o Telegram:', telegramError.message);
            }
        } else {
            console.log('Thi·∫øu th√¥ng tin c·∫•u h√¨nh Telegram.');
        }

        res.status(200).json({ order: newMadon });
    } catch (error) {
        console.error(error);
        res.status(500).json({ message: 'Kh√¥ng th·ªÉ th√™m ƒë∆°n h√†ng', error: error.message });
    }
};
/* H√†m l·∫•y danh s√°ch d·ªãch v·ª• */
exports.getOrderStatus = async (req, res) => {
    try {
        const { key, order } = req.body;

        // Ki·ªÉm tra xem token c√≥ ƒë∆∞·ª£c g·ª≠i kh√¥ng
        if (!key) {
            return res.status(400).json({ success: false, message: "Token kh√¥ng ƒë∆∞·ª£c b·ªè tr·ªëng" });
        }
        // X√°c th·ª±c token
        let decoded;
        try {
            decoded = jwt.verify(key, "secretKey");
        } catch (err) {
            return res.status(401).json({ success: false, message: "Token kh√¥ng h·ª£p l·ªá" });
        }

        // Ki·ªÉm tra tr·∫°ng th√°i ng∆∞·ªùi d√πng trong CSDL (v√≠ d·ª•: 'active')
        const user = await User.findById(decoded.userId);
        if (!user) {
            return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });
        }
        if (user.status && user.status !== 'active') {
            return res.status(403).json({ success: false, message: "Ng∆∞·ªùi d√πng kh√¥ng ho·∫°t ƒë·ªông" });
        }

        // Ki·ªÉm tra orders c√≥ ƒë∆∞·ª£c g·ª≠i hay kh√¥ng
        if (!orders) {
            return res.status(400).json({ success: false, message: "Danh s√°ch ƒë∆°n h√†ng kh√¥ng ƒë∆∞·ª£c b·ªè tr·ªëng" });
        }

        // T√°ch chu·ªói orders th√†nh m·∫£ng s·ªë (gi·∫£ s·ª≠ tr∆∞·ªùng 'Madon' c·ªßa ƒë∆°n h√†ng l√† ki·ªÉu Number)
        const orderNumbers = orders.split(',').map(num => Number(num.trim()));

        // L·∫•y c√°c ƒë∆°n h√†ng c√≥ Madon n·∫±m trong m·∫£ng orderNumbers
        const orderDocs = await Order.find({ Madon: { $in: orderNumbers } });

        // ƒê·ªãnh d·∫°ng c√°c tr∆∞·ªùng c·∫ßn hi·ªÉn th·ªã (c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh theo y√™u c·∫ßu)
        const formattedOrders = orderDocs.map(order => ({
            order: order.Madon,
            charge: order.totalCost,
            start_count: order.start,
            status: order.status,
            remains: order.quantity - order.dachay,
            currency: "VND",

            // Madon: order.Madon,
            // orderId: order.orderId,
            // namesv: order.namesv,
            // status: order.status,
            // createdAt: order.createdAt,
            // totalCost: order.totalCost,
            // Th√™m c√°c tr∆∞·ªùng kh√°c n·∫øu c·∫ßn
        }));

        return res.status(200).json(formattedOrders);
    } catch (error) {
        console.error("L·ªói khi l·∫•y tr·∫°ng th√°i ƒë∆°n:", error);
        return res.status(500).json({
            success: false,
            message: "L·ªói khi l·∫•y tr·∫°ng th√°i ƒë∆°n",
            error: error.message
        });
    }
};
exports.getme = async (req, res) => {
    try {
        const { key } = req.body;

        // Ki·ªÉm tra xem token c√≥ ƒë∆∞·ª£c g·ª≠i kh√¥ng
        if (!key) {
            return res.status(400).json({ success: false, message: "Token kh√¥ng ƒë∆∞·ª£c b·ªè tr·ªëng" });
        }
        // X√°c th·ª±c token
        let decoded;
        try {
            decoded = jwt.verify(key, "secretKey");
        } catch (err) {
            return res.status(401).json({ success: false, message: "Token kh√¥ng h·ª£p l·ªá" });
        }

        // Ki·ªÉm tra tr·∫°ng th√°i ng∆∞·ªùi d√πng trong CSDL (v√≠ d·ª•: 'active')
        const user = await User.findById(decoded.userId);
        if (!user) {
            return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });
        }
        if (user.status && user.status !== 'active') {
            return res.status(403).json({ success: false, message: "Ng∆∞·ªùi d√πng kh√¥ng ho·∫°t ƒë·ªông" });
        }
        // ƒê·ªãnh d·∫°ng c√°c tr∆∞·ªùng c·∫ßn hi·ªÉn th·ªã (c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh theo y√™u c·∫ßu)
        const userForm = {
            balance: user.balance,
            currency: "VND",
            // C√°c tr∆∞·ªùng kh√°c n·∫øu c·∫ßn
        };
        return res.status(200).json(userForm);
    } catch (error) {
        console.error("L·ªói khi l·∫•y th√¥ng tin:", error);
        return res.status(500).json({
            success: false,
            message: "L·ªói khi l·∫•y th√¥ng tin",
            error: error.message
        });
    }
};
/* H√†m ƒëi·ªÅu ph·ªëi d·ª±a tr√™n gi√° tr·ªã c·ªßa action trong body */
exports.routeRequest = async (req, res) => {
    const { action } = req.body;

    if (action === 'services') {
        // G·ªçi h√†m l·∫•y danh s√°ch d·ªãch v·ª•
        return exports.getServices(req, res);
    } else if (action === 'add') {
        // G·ªçi h√†m t·∫°o ƒë∆°n h√†ng
        return exports.AddOrder(req, res);
    } else if (action === 'status') {
        // G·ªçi h√†m t·∫°o get tr·∫°ng th√°i
        return exports.getOrderStatus(req, res);
    } else if (action === 'balance') {
        // G·ªçi h√†m t·∫°o get tr·∫°ng th√°i
        return exports.getme(req, res);
    }
    else {
        return res.status(400).json({ message: "Action kh√¥ng h·ª£p l·ªá" });
    }
};
