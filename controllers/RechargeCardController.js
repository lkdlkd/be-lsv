const crypto = require("crypto");
const RechargeCard = require("../models/TransactionSchema");
const Transaction = require("../models/HistoryUser");
const User = require("../models/User"); // ƒê·∫£m b·∫£o import model User
const cron = require("node-cron");
const axios = require("axios");

/**
 * Controller c·∫≠p nh·∫≠t tr·∫°ng th√°i th·∫ª c√†o
 */
exports.rechargeCardStatus = async () => {
    try {
        console.log("üîÑ ƒêang ki·ªÉm tra v√† c·∫≠p nh·∫≠t tr·∫°ng th√°i th·∫ª c√†o...");

        // L·∫•y t·∫•t c·∫£ c√°c th·∫ª c√†o c√≥ tr·∫°ng th√°i 'pending'
        const pendingCards = await RechargeCard.find({ status: "pending" });
        console.log("ccard ", pendingCards);

        // L·∫•y c·∫•u h√¨nh ƒë·ªëi t√°c t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
        const partner_id = process.env.PARTNER_ID || "your_partner_id";
        const percent_card = Number(process.env.PERCENT_CARD);
        const partner_key = process.env.PARTNER_KEY || "your_partner_key";

        for (const card of pendingCards) {
            // T·∫°o ch·ªØ k√Ω MD5: partner_key + card.code + card.serial
            const sign = crypto
                .createHash("md5")
                .update(partner_key + card.code + card.serial)
                .digest("hex");
            console.log("sign:", sign);

            const command = "check";
            // T·∫°o form-data ƒë·ªÉ g·ª≠i ƒë·∫øn API ƒë·ªëi t√°c
            const FormData = require("form-data");
            const formdata = new FormData();
            formdata.append("telco", card.type);
            formdata.append("code", card.code);
            formdata.append("serial", card.serial);
            formdata.append("amount", card.amount);
            formdata.append("request_id", card.request_id);
            formdata.append("partner_id", partner_id);
            formdata.append("sign", sign);
            formdata.append("command", command);

            // G·ª≠i y√™u c·∫ßu l√™n API ƒë·ªëi t√°c
            const statusCard = await axios.post(process.env.API_URLCARD, formdata, {
                headers: {
                    ...formdata.getHeaders(),
                },
            });
            console.log("Tr·∫°ng th√°i tr·∫£ v·ªÅ t·ª´ API ƒë·ªëi t√°c:", statusCard.data);

            // Ki·ªÉm tra k·∫øt qu·∫£ tr·∫£ v·ªÅ t·ª´ API d·ª±a tr√™n status code
            const apiStatus = statusCard.data.status;
            // N·∫øu API c√≥ tr·∫£ v·ªÅ th√¥ng b√°o l·ªói c·ª• th·ªÉ (v√≠ d·ª•: trong tr∆∞·ªùng message), b·∫°n c√≥ th·ªÉ l·∫•y th√¥ng tin ƒë√≥
            const errorMessage = statusCard.data.message || "";

            if (typeof apiStatus !== "undefined") {
                if (apiStatus === 1) {
                    // 1: Th·∫ª th√†nh c√¥ng ƒë√∫ng m·ªánh gi√°
                    const userData = await User.findOne({ username: card.username });
                    if (!userData) {
                        console.error(`Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng: ${card.username}`);
                        continue;
                    }

                    const chietkhau = card.amount - (card.amount * percent_card / 100);
                    const note = `B·∫°n ƒë√£ n·∫°p th√†nh c√¥ng ${chietkhau.toLocaleString("vi-VN")} VNƒê t·ª´ th·∫ª c√†o. S·ªë d∆∞ t√†i kho·∫£n c·ªßa b·∫°n l√† ${(userData.balance + chietkhau).toLocaleString("vi-VN")} VNƒê`;

                    // T·∫°o giao d·ªãch m·ªõi (HistoryUser)
                    await Transaction.create({
                        username: userData.username,
                        madon: " ", // ho·∫∑c gi√° tr·ªã ƒë·ªãnh danh giao d·ªãch kh√°c
                        hanhdong: "n·∫°p ti·ªÅn th·∫ª c√†o",
                        tongtien: chietkhau,
                        tienhientai: userData.balance,
                        tienconlai: userData.balance + chietkhau,
                        mota: note,
                    });

                    // C·∫≠p nh·∫≠t th·∫ª c√†o v√† s·ªë d∆∞ c·ªßa ng∆∞·ªùi d√πng
                    card.real_amount = chietkhau;
                    card.status = "success";
                    await card.save();

                    userData.balance += chietkhau;
                    userData.tongnapthang = (userData.tongnapthang || 0) + chietkhau;

                    userData.tongnap = (userData.tongnap || 0) + chietkhau;
                    await userData.save();
                    const taoluc = new Date();
                    const telegramBotToken = process.env.TELEGRAM_BOT_TOKEN;
                    const telegramChatId = process.env.TELEGRAM_CHAT_ID;
                    if (telegramBotToken && telegramChatId) {
                        const telegramMessage = `üìå *C·ªông ti·ªÅn!*\n\n` +
                            `üë§ *Kh√°ch h√†ng:* ${card.username}\n` +
                            `üë§ *C·ªông ti·ªÅn:*  n·∫°p th·∫ª th√†nh c√¥ng s·ªë ti·ªÅn  ${chietkhau}.\n` +
                            `üîπ *T·∫°o l√∫c:* ${taoluc.toLocaleString()}\n`;
                        try {
                            await axios.post(`https://api.telegram.org/bot${telegramBotToken}/sendMessage`, {
                                chat_id: telegramChatId,
                                text: telegramMessage,
                            });
                            console.log('Th√¥ng b√°o Telegram ƒë√£ ƒë∆∞·ª£c g·ª≠i.');
                        } catch (telegramError) {
                            console.error('L·ªói g·ª≠i th√¥ng b√°o Telegram:', telegramError.message);
                        }
                    } else {
                        console.log('Thi·∫øu th√¥ng tin c·∫•u h√¨nh Telegram.');
                    }
                } else if (apiStatus === 2) {
                    // 2: Th·∫ª th√†nh c√¥ng sai m·ªánh gi√° (ch·ªâ nh·∫≠n 50% m·ªánh gi√°)
                    const userData = await User.findOne({ username: card.username });
                    if (!userData) {
                        console.error(`Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng: ${card.username}`);
                        continue;
                    }

                    // T√≠nh s·ªë ti·ªÅn th·ª±c nh·∫≠n b·∫±ng 50% c·ªßa m·ªánh gi√°
                    const chietkhau2 = statusCard.data.amount * 0.5;
                    const note = `Th·∫ª c√†o th√†nh c√¥ng nh∆∞ng sai m·ªánh gi√°. ch·ªâ nh·∫≠n ${chietkhau2.toLocaleString("vi-VN")} VNƒê.`;

                    // T·∫°o giao d·ªãch v·ªõi tr·∫°ng th√°i c·∫£nh b√°o
                    await Transaction.create({
                        username: userData.username,
                        madon: " ", // ho·∫∑c gi√° tr·ªã ƒë·ªãnh danh giao d·ªãch kh√°c
                        hanhdong: "n·∫°p ti·ªÅn th·∫ª c√†o - sai m·ªánh gi√°",
                        tongtien: chietkhau2,
                        tienhientai: userData.balance,
                        tienconlai: userData.balance + chietkhau2,
                        mota: note,
                    });

                    // C·∫≠p nh·∫≠t th·∫ª c√†o v√† s·ªë d∆∞
                    card.real_amount = chietkhau2;
                    card.status = "warning"; // ho·∫∑c b·∫°n c√≥ th·ªÉ t·∫°o status ri√™ng nh∆∞ "warning"
                    await card.save();

                    userData.balance += chietkhau2;
                    userData.tongnapthang = (userData.tongnapthang || 0) + chietkhau2;

                    userData.tongnap = (userData.tongnap || 0) + chietkhau2;
                    await userData.save();

                    const taoluc = new Date();
                    const telegramBotToken = process.env.TELEGRAM_BOT_TOKEN;
                    const telegramChatId = process.env.TELEGRAM_CHAT_ID;
                    if (telegramBotToken && telegramChatId) {
                        const telegramMessage = `üìå *C·ªông ti·ªÅn!*\n\n` +
                            `üë§ *Kh√°ch h√†ng:* ${card.username}\n` +
                            `üë§ *C·ªông ti·ªÅn:*  n·∫°p th·∫ª th√†nh c√¥ng s·ªë ti·ªÅn  ${chietkhau2} v√† sai m·ªánh gi√°.\n` +
                            `üîπ *T·∫°o l√∫c:* ${taoluc.toLocaleString()}\n`;
                        try {
                            await axios.post(`https://api.telegram.org/bot${telegramBotToken}/sendMessage`, {
                                chat_id: telegramChatId,
                                text: telegramMessage,
                            });
                            console.log('Th√¥ng b√°o Telegram ƒë√£ ƒë∆∞·ª£c g·ª≠i.');
                        } catch (telegramError) {
                            console.error('L·ªói g·ª≠i th√¥ng b√°o Telegram:', telegramError.message);
                        }
                    } else {
                        console.log('Thi·∫øu th√¥ng tin c·∫•u h√¨nh Telegram.');
                    }
                } else if (apiStatus === 3) {
                    // 3: Th·∫ª l·ªói
                    card.status = "failed";
                    card.real_amount = 0;
                    await card.save();
                } else if (apiStatus === 4) {
                    // 4: H·ªá th·ªëng b·∫£o tr√¨
                    // B·∫°n c√≥ th·ªÉ c·∫≠p nh·∫≠t status th√†nh "maintenance" ho·∫∑c gi·ªØ l·∫°i pending ƒë·ªÉ th·ª≠ l·∫°i sau
                    card.status = "pending";
                    await card.save();
                } else if (apiStatus === 99) {
                    // 99: Th·∫ª ch·ªù x·ª≠ l√Ω - gi·ªØ nguy√™n tr·∫°ng th√°i pending, kh√¥ng l√†m g√¨ th√™m
                    console.log(`Th·∫ª ${card.code} ƒëang ch·ªù x·ª≠ l√Ω.`);
                } else if (apiStatus === 100) {
                    // 100: G·ª≠i th·∫ª th·∫•t b·∫°i - c√≥ l√Ω do ƒëi k√®m
                    card.status = "failed";
                    card.real_amount = 0;
                    // N·∫øu API tr·∫£ v·ªÅ l√Ω do, b·∫°n c√≥ th·ªÉ l∆∞u v√†o tr∆∞·ªùng mota ho·∫∑c m·ªôt tr∆∞·ªùng kh√°c
                    card.mota = `G·ª≠i th·∫ª th·∫•t b·∫°i: ${errorMessage}`;
                    await card.save();
                }
            }
        }

        console.log("‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i th·∫ª c√†o ho√†n t·∫•t");
    } catch (error) {
        console.error("‚ö† L·ªói c·∫≠p nh·∫≠t tr·∫°ng th√°i th·∫ª c√†o:", error.message);
    }
};

// T·∫°o cron job ch·∫°y m·ªói 1 ph√∫t
cron.schedule("*/1 * * * *", async () => {
    console.log("‚è≥ Ch·∫°y cron job ki·ªÉm tra th·∫ª c√†o...");
    await exports.rechargeCardStatus();
});
