const axios = require('axios');
const jwt = require("jsonwebtoken");
const Service = require('../../models/Service');
const Order = require('../../models/Order');
const HistoryUser = require('../../models/HistoryUser');
const User = require('../../models/User');
const SmmSv = require("../../models/SmmSv");

async function addOrder(req, res) {
  // Ki·ªÉm tra token t·ª´ header
  const authHeader = req.headers.authorization;
  if (!authHeader) {
    return res.status(401).json({ message: 'Kh√¥ng c√≥ token trong header' });
  }
  const token = authHeader.split(' ')[1];
  if (!token) {
    return res.status(401).json({ message: 'Token kh√¥ng h·ª£p l·ªá' });
  }

  let decoded;
  try {
    decoded = jwt.verify(token, "secretKey");
  } catch (err) {
    return res.status(401).json({ message: 'Token h·∫øt h·∫°n ho·∫∑c kh√¥ng h·ª£p l·ªá' });
  }
  
  // So s√°nh username trong token v√† trong body
  // const tokenUsername = decoded.username;
  const { username, link, category, quantity, magoi, note, comments } = req.body;
  // if (username !== tokenUsername) {
  //   return res.status(403).json({ message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán h√†nh ƒë·ªông n√†y' });
  // }

  const qty = Number(quantity);
  const formattedComments = comments ? comments.replace(/\r?\n/g, "\r\n") : "";

  try {
    // --- B∆∞·ªõc 1: L·∫•y th√¥ng tin d·ªãch v·ª• t·ª´ CSDL ---
    const serviceFromDb = await Service.findOne({ Magoi: magoi });
    if (!serviceFromDb) {
      return res.status(400).json({ message: 'D·ªãch v·ª• kh√¥ng t·ªìn t·∫°i' });
    }
    console.log("sv :", serviceFromDb);

    // --- L·∫•y c·∫•u h√¨nh API t·ª´ CSDL ---
    const smmSvConfig = await SmmSv.findOne({ name: serviceFromDb.DomainSmm });
    if (!smmSvConfig || !smmSvConfig.url_api || !smmSvConfig.api_token) {
      return res.status(500).json({ message: 'L·ªói khi mua d·ªãch v·ª•, vui l√≤ng ib admin' });
    }
    console.log("smm :", smmSvConfig);

    // --- B∆∞·ªõc 2: G·ª≠i y√™u c·∫ßu l·∫•y th√¥ng tin d·ªãch v·ª• t·ª´ API b√™n th·ª© 3 ---
    const serviceResponse = await axios.post(smmSvConfig.url_api, {
      key: smmSvConfig.api_token,
      action: 'services',
    });

    if (!serviceResponse.data || !Array.isArray(serviceResponse.data)) {
      return res.status(400).json({ message: 'Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu d·ªãch v·ª•' });
    }
    const serviceFromApi = serviceResponse.data.find(
      service => service.service === Number(serviceFromDb.serviceId)
    );
    if (!serviceFromApi) {
      return res.status(400).json({ message: 'D·ªãch v·ª• kh√¥ng t·ªìn t·∫°i' });
    }

    // T√≠nh t·ªïng chi ph√≠ v√† l√†m tr√≤n 2 s·ªë th·∫≠p ph√¢n
    const totalCost = parseFloat((serviceFromDb.rate * qty).toFixed(2));

    if (serviceFromApi.rate > serviceFromDb.rate) {
      return res.status(400).json({ message: 'L·ªói khi mua d·ªãch v·ª•, vui l√≤ng ib admin' });
    }

    // --- B∆∞·ªõc 3: Ki·ªÉm tra s·ªë d∆∞ t√†i kho·∫£n c·ªßa ng∆∞·ªùi d√πng ---
    const user = await User.findOne({ username });
    if (!user) {
      return res.status(400).json({ message: 'Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i' });
    }
    if (qty < serviceFromDb.min) {
      return res.status(400).json({ message: 'S·ªë l∆∞·ª£ng v∆∞·ª£t qu√° gi·ªõi h·∫°n' });
    }
    if (qty > serviceFromDb.max) {
      return res.status(400).json({ message: 'S·ªë l∆∞·ª£ng v∆∞·ª£t qu√° gi·ªõi h·∫°n' });
    }
    const currentBalance = parseFloat(user.balance.toFixed(2));
    if (currentBalance < totalCost) {
      return res.status(400).json({ message: 'S·ªë d∆∞ kh√¥ng ƒë·ªß ƒë·ªÉ th·ª±c hi·ªán giao d·ªãch' });
    }

    // --- B∆∞·ªõc 4: G·ª≠i y√™u c·∫ßu mua d·ªãch v·ª• qua API b√™n th·ª© 3 ---
    const purchasePayload = {
      key: smmSvConfig.api_token,
      action: 'add',
      link,
      quantity: qty,
      service: serviceFromDb.serviceId,
      comments: formattedComments,
    };

    const purchaseResponse = await axios.post(smmSvConfig.url_api, purchasePayload);
    if (!purchaseResponse.data || purchaseResponse.data.error) {
      return res.status(400).json({
        message: 'L·ªói khi mua d·ªãch v·ª•, vui l√≤ng ib admin',
        error: purchaseResponse.data?.error
      });
    }
    const tiencu = user.balance;

    // --- B∆∞·ªõc 5: Tr·ª´ s·ªë ti·ªÅn v√†o t√†i kho·∫£n ng∆∞·ªùi d√πng ---
    const newBalance = parseFloat((currentBalance - totalCost).toFixed(2));
    user.balance = newBalance;
    await user.save();

    // --- B∆∞·ªõc 6: T·∫°o m√£ ƒë∆°n (Madon) ---
    const lastOrder = await Order.findOne({}).sort({ Madon: -1 });
    const newMadon = lastOrder && lastOrder.Madon ? Number(lastOrder.Madon) + 1 : 10000;

    // --- B∆∞·ªõc 7: T·∫°o ƒë·ªëi t∆∞·ª£ng ƒë∆°n h√†ng v√† l∆∞u v√†o CSDL ---
    const createdAt = new Date();
    const orderData = new Order({
      Madon: newMadon,
      username,
      SvID : serviceFromDb.serviceId,
      orderId: purchaseResponse.data.order,
      namesv: serviceFromDb.name,
      category,
      link,
      start: purchaseResponse.data.start_count || 0,
      quantity: qty,
      rate: parseFloat(serviceFromDb.rate.toFixed(2)),
      totalCost,
      createdAt,
      status: purchaseResponse.data.status || 'Pending',
      note,
      comments: formattedComments,
    });

    const HistoryData = new HistoryUser({
      username,
      madon: newMadon,
      hanhdong: 'T·∫°o ƒë∆°n h√†ng',
      link,
      tienhientai: tiencu,
      tongtien: totalCost,
      tienconlai: newBalance,
      createdAt,
      mota: ' TƒÉng ' + serviceFromDb.name + ' th√†nh c√¥ng cho uid ' + link,
    });

    console.log('Order:', orderData);
    console.log('History:', HistoryData);

    await orderData.save();
    await HistoryData.save();

    console.log('Order saved successfully!');

    // --- B∆∞·ªõc 8: G·ª≠i th√¥ng b√°o v·ªÅ Telegram ---
    const telegramBotToken = process.env.TELEGRAM_BOT_TOKEN;
    const telegramChatId = process.env.TELEGRAM_CHAT_ID;
    if (telegramBotToken && telegramChatId) {
      const telegramMessage = `üìå *ƒê∆°n h√†ng m·ªõi ƒë√£ ƒë∆∞·ª£c t·∫°o!*\n\n` +
        `üë§ *Kh√°ch h√†ng:* ${username}\n` +
        `üîπ *D·ªãch v·ª•:* ${serviceFromDb.name}\n` +
        `üîó *Link:* ${link}\n` +
        `üìå *S·ªë l∆∞·ª£ng:* ${qty}\n` +
        `üí∞ *TI·ªÅn c≈©:* ${tiencu.toLocaleString()} VNƒê\n` +
        `üí∞ *T·ªïng ti·ªÅn:* ${totalCost.toLocaleString()} VNƒê\n` +
        `üí∞ *TI·ªÅn c√≤n l·∫°i:* ${newBalance.toLocaleString()} VNƒê\n` +
        `üÜî *M√£ ƒë∆°n:* ${newMadon}\n` +
        `üìÜ *Ng√†y t·∫°o:* ${createdAt.toLocaleString()}\n` +
        `üìù *Ghi ch√∫:* ${note || 'Kh√¥ng c√≥'}`;

      try {
        await axios.post(`https://api.telegram.org/bot${telegramBotToken}/sendMessage`, {
          chat_id: telegramChatId,
          text: telegramMessage,
        });
        console.log('Th√¥ng b√°o Telegram ƒë√£ ƒë∆∞·ª£c g·ª≠i.');
      } catch (telegramError) {
        console.error('L·ªói g·ª≠i th√¥ng b√°o Telegram:', telegramError.message);
      }
    } else {
      console.log('Thi·∫øu th√¥ng tin c·∫•u h√¨nh Telegram.');
    }

    res.status(200).json({ message: 'Mua d·ªãch v·ª• th√†nh c√¥ng', order: orderData });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Kh√¥ng th·ªÉ th√™m ƒë∆°n h√†ng', error: error.message });
  }
}

module.exports = { addOrder };
