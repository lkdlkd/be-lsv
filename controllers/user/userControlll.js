const jwt = require("jsonwebtoken");
const User = require("../../models/User");
const HistoryUser = require('../../models/HistoryUser');
const axios = require('axios');

// ƒêƒÉng nh·∫≠p
exports.login = async (req, res) => {
    try {
        const { username, password } = req.body;
        const user = await User.findOne({ username });
        if (!user || !(await user.comparePassword(password))) {
            return res.status(401).json({ error: "Sai t√™n ng∆∞·ªùi d√πng ho·∫∑c m·∫≠t kh·∫©u" });
        }
        // Tr·∫£ v·ªÅ token ƒë√£ l∆∞u trong user (ho·∫∑c t·∫°o token m·ªõi n·∫øu c·∫ßn)
        return res.status(200).json({ token: user.token, role: user.role, username: user.username });
    } catch (error) {
        console.error("Login error:", error);
        return res.status(500).json({ error: "C√≥ l·ªói x·∫£y ra khi ƒëƒÉng nh·∫≠p" });
    }
};

// ƒêƒÉng k√Ω
exports.register = async (req, res) => {
    try {
        const { username, password } = req.body;

        // Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng ƒë√£ t·ªìn t·∫°i
        const existingUser = await User.findOne({ username });
        if (existingUser) {
            return res.status(400).json({ error: "T√™n ng∆∞·ªùi d√πng ƒë√£ t·ªìn t·∫°i" });
        }

        // Ki·ªÉm tra xem ƒë√£ c√≥ admin ch∆∞a
        const isAdminExists = await User.findOne({ role: "admin" });

        // T·∫°o ng∆∞·ªùi d√πng m·ªõi, kh√¥ng c·∫ßn truy·ªÅn capbac v√¨ schema ƒë√£ c√≥ default
        const user = new User({
            username,
            password,
            role: isAdminExists ? "user" : "admin",
            token: "", // T·∫°m th·ªùi ƒë·ªÉ r·ªóng, s·∫Ω c·∫≠p nh·∫≠t sau khi t·∫°o token
        });
        await user.save();

        // T·∫°o token cho user m·ªõi (kh√¥ng h·∫øt h·∫°n)
        const token = jwt.sign(
            { username :user.username ,userId: user._id, role: user.role, capbac: user.capbac },
            "secretKey"
            // Kh√¥ng s·ª≠ d·ª•ng expiresIn, token s·∫Ω kh√¥ng h·∫øt h·∫°n
        );
        // C·∫≠p nh·∫≠t token v√†o user
        user.token = token;
        await user.save();

        const telegramBotToken = process.env.TELEGRAM_BOT_TOKEN;
        const telegramChatId = process.env.TELEGRAM_CHAT_ID;
        if (telegramBotToken && telegramChatId) {
            const telegramMessage = `üìå *C√≥ kh√°ch m·ªõi ƒë∆∞·ª£c t·∫°o!*\n\n` +
                `üë§ *Kh√°ch h√†ng:* ${username}\n` +
                `üîπ *t·∫°o l√∫c* ${new Date()}\n`;
            try {
                await axios.post(`https://api.telegram.org/bot${telegramBotToken}/sendMessage`, {
                    chat_id: telegramChatId,
                    text: telegramMessage,
                });
                console.log('Th√¥ng b√°o Telegram ƒë√£ ƒë∆∞·ª£c g·ª≠i.');
            } catch (telegramError) {
                console.error('L·ªói g·ª≠i th√¥ng b√°o Telegram:', telegramError.message);
            }
        } else {
            console.log('Thi·∫øu th√¥ng tin c·∫•u h√¨nh Telegram.');
        }
        return res.status(201).json({ message: "ƒêƒÉng k√Ω th√†nh c√¥ng", userId: user._id, token });
    } catch (error) {
        console.error("ƒêƒÉng k√Ω l·ªói:", error);
        return res.status(500).json({ error: "C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i." });
    }
};


// L·∫•y s·ªë d∆∞ ng∆∞·ªùi d√πng
exports.getBalance = async (req, res) => {
    const { username } = req.query;
    try {
        // L·∫•y token t·ª´ header (gi·∫£ s·ª≠ ƒë·ªãnh d·∫°ng: "Bearer <token>")
        const authHeader = req.headers.authorization;
        if (!authHeader) {
            return res.status(401).json({ error: 'Kh√¥ng c√≥ token trong header' });
        }
        const token = authHeader.split(' ')[1];
        if (!token) {
            return res.status(401).json({ error: 'Token kh√¥ng h·ª£p l·ªá' });
        }

        // Gi·∫£i m√£ token
        let decoded;
        try {
            decoded = jwt.verify(token, "secretKey");
        } catch (err) {
            return res.status(401).json({ error: 'Token h·∫øt h·∫°n ho·∫∑c kh√¥ng h·ª£p l·ªá' });
        }

        // T√¨m ng∆∞·ªùi d√πng theo username (ho·∫∑c c√≥ th·ªÉ t√¨m theo id t·ª´ token)
        const user = await User.findOne({ username }).select("-password");
        if (!user) {
            return res.status(404).json({ error: 'Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i' });
        }

        // Ki·ªÉm tra xem token c√≥ ph·∫£i c·ªßa user ƒëang y√™u c·∫ßu kh√¥ng
        if (decoded.userId !== user._id.toString()) {
            return res.status(403).json({ error: 'B·∫°n kh√¥ng c√≥ quy·ªÅn xem th√¥ng tin ng∆∞·ªùi d√πng n√†y' });
        }

        return res.status(200).json(user);
    } catch (error) {
        console.error("Get balance error:", error);
        return res.status(500).json({ error: 'C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau.' });
    }
};

// C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng (ch·ªâ admin ho·∫∑c ch√≠nh ch·ªß m·ªõi c√≥ th·ªÉ s·ª≠a)
exports.updateUser = async (req, res) => {
    try {
        // L·∫•y token t·ª´ header (gi·∫£ s·ª≠ ƒë·ªãnh d·∫°ng: "Bearer <token>")
        const authHeader = req.headers.authorization;
        if (!authHeader) {
            return res.status(401).json({ error: 'Kh√¥ng c√≥ token trong header' });
        }
        const token = authHeader.split(' ')[1];
        if (!token) {
            return res.status(401).json({ error: 'Token kh√¥ng h·ª£p l·ªá' });
        }

        // Gi·∫£i m√£ token
        let decoded;
        try {
            decoded = jwt.verify(token, "secretKey");
        } catch (err) {
            return res.status(401).json({ error: 'Token h·∫øt h·∫°n ho·∫∑c kh√¥ng h·ª£p l·ªá' });
        }

        const { id } = req.params;

        // Cho ph√©p c·∫≠p nh·∫≠t n·∫øu l√† admin ho·∫∑c ch√≠nh ch·ªß t√†i kho·∫£n (so s√°nh decoded.userId v·ªõi id)
        if (decoded.role !== "admin" && decoded.userId !== id) {
            return res.status(403).json({ error: 'B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠a th√¥ng tin ng∆∞·ªùi d√πng n√†y' });
        }

        const updatedData = req.body;
        const updatedUser = await User.findByIdAndUpdate(id, updatedData, { new: true });
        if (!updatedUser) {
            return res.status(404).json({ message: 'User not found' });
        }
        return res.json(updatedUser);
    } catch (error) {
        return res.status(500).json({ message: error.message });
    }
};


// L·∫•y danh s√°ch ng∆∞·ªùi d√πng c√≥ ph√¢n trang (ch·ªâ admin m·ªõi c√≥ quy·ªÅn truy c·∫≠p)
exports.getUsers = async (req, res) => {
    try {
        // L·∫•y token t·ª´ header (gi·∫£ s·ª≠ ƒë·ªãnh d·∫°ng: "Bearer <token>")
        const authHeader = req.headers.authorization;
        if (!authHeader) {
            return res.status(401).json({ error: 'Kh√¥ng c√≥ token trong header' });
        }
        const token = authHeader.split(' ')[1];
        if (!token) {
            return res.status(401).json({ error: 'Token kh√¥ng h·ª£p l·ªá' });
        }

        // Gi·∫£i m√£ token
        let decoded;
        try {
            decoded = jwt.verify(token, "secretKey");
        } catch (err) {
            return res.status(401).json({ error: 'Token h·∫øt h·∫°n ho·∫∑c kh√¥ng h·ª£p l·ªá' });
        }

        // Ki·ªÉm tra vai tr√≤ admin
        if (decoded.role !== "admin") {
            return res.status(403).json({ error: 'Ch·ªâ admin m·ªõi c√≥ quy·ªÅn xem danh s√°ch ng∆∞·ªùi d√πng' });
        }

        // X·ª≠ l√Ω ph√¢n trang
        let { page, limit } = req.query;
        if (limit === "all") {
            const users = await User.find();
            return res.json(users);
        }
        page = parseInt(page) || 1;
        limit = parseInt(limit) || 10;

        const users = await User.find()
            .skip((page - 1) * limit)
            .limit(limit);

        const total = await User.countDocuments();
        return res.json({
            total,
            page,
            totalPages: Math.ceil(total / limit),
            users,
        });
    } catch (error) {
        return res.status(500).json({ message: error.message });
    }
};




// C·ªông ti·ªÅn v√†o s·ªë d∆∞ (ch·ªâ admin m·ªõi c√≥ quy·ªÅn)
exports.addBalance = async (req, res) => {
    try {
        // X√°c th·ª±c token t·ª´ header
        const authHeader = req.headers.authorization;
        if (!authHeader) {
            return res.status(401).json({ error: 'Kh√¥ng c√≥ token trong header' });
        }
        const token = authHeader.split(' ')[1];
        if (!token) {
            return res.status(401).json({ error: 'Token kh√¥ng h·ª£p l·ªá' });
        }

        // Gi·∫£i m√£ token
        let decoded;
        try {
            decoded = jwt.verify(token, "secretKey");
        } catch (err) {
            return res.status(401).json({ error: 'Token h·∫øt h·∫°n ho·∫∑c kh√¥ng h·ª£p l·ªá' });
        }

        // Ch·ªâ admin m·ªõi c√≥ quy·ªÅn c·ªông ti·ªÅn
        if (decoded.role !== "admin") {
            return res.status(403).json({ error: 'Ch·ªâ admin m·ªõi c√≥ quy·ªÅn c·ªông ti·ªÅn v√†o s·ªë d∆∞' });
        }

        const { id } = req.params;
        const { amount } = req.body;

        if (!amount || isNaN(amount) || amount <= 0) {
            return res.status(400).json({ message: 'S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá' });
        }

        const updatedUser = await User.findByIdAndUpdate(
            id,
            { $inc: { balance: amount, tongnap: amount } },
            { new: true }
        );

        if (!updatedUser) {
            return res.status(404).json({ message: 'Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i' });
        }

        // L∆∞u l·ªãch s·ª≠ giao d·ªãch
        const currentBalance = updatedUser.balance;
        const historyDataa = new HistoryUser({
            username: updatedUser.username,
            madon: "null",
            hanhdong: 'C·ªông ti·ªÅn',
            link: "",
            tienhientai: currentBalance,
            tongtien: amount,
            tienconlai: currentBalance + amount,
            createdAt: new Date(),
            mota: 'C·ªông th√†nh c√¥ng s·ªë ti·ªÅn ' + amount,
        });
        console.log('History:', historyDataa);
        await historyDataa.save();

        res.status(200).json({ message: 'C·ªông ti·ªÅn th√†nh c√¥ng', user: updatedUser });
    } catch (error) {
        console.error("Add balance error:", error);
        return res.status(500).json({ message: 'L·ªói server' });
    }
};

// X√≥a ng∆∞·ªùi d√πng (ch·ªâ admin m·ªõi c√≥ quy·ªÅn)
exports.deleteUser = async (req, res) => {
    try {
        // X√°c th·ª±c token t·ª´ header
        const authHeader = req.headers.authorization;
        if (!authHeader) {
            return res.status(401).json({ error: 'Kh√¥ng c√≥ token trong header' });
        }
        const token = authHeader.split(' ')[1];
        if (!token) {
            return res.status(401).json({ error: 'Token kh√¥ng h·ª£p l·ªá' });
        }

        // Gi·∫£i m√£ token
        let decoded;
        try {
            decoded = jwt.verify(token, "secretKey");
        } catch (err) {
            return res.status(401).json({ error: 'Token h·∫øt h·∫°n ho·∫∑c kh√¥ng h·ª£p l·ªá' });
        }

        // Ch·ªâ admin m·ªõi c√≥ quy·ªÅn x√≥a user
        if (decoded.role !== "admin") {
            return res.status(403).json({ error: 'Ch·ªâ admin m·ªõi c√≥ quy·ªÅn x√≥a ng∆∞·ªùi d√πng' });
        }

        const { id } = req.params;
        const deletedUser = await User.findByIdAndDelete(id);
        if (!deletedUser) {
            return res.status(404).json({ message: 'User not found' });
        }
        return res.json({ message: 'User deleted successfully' });
    } catch (error) {
        return res.status(500).json({ message: error.message });
    }
};

// ƒê·ªïi m·∫≠t kh·∫©u (ch·ªâ admin ho·∫∑c ch√≠nh ch·ªß t√†i kho·∫£n m·ªõi c√≥ th·ªÉ ƒë·ªïi m·∫≠t kh·∫©u)
exports.changePassword = async (req, res) => {
    try {
        // L·∫•y token t·ª´ header (gi·∫£ s·ª≠ ƒë·ªãnh d·∫°ng: "Bearer <token>")
        const authHeader = req.headers.authorization;
        if (!authHeader) {
            return res.status(401).json({ error: 'Kh√¥ng c√≥ token trong header' });
        }
        const token = authHeader.split(' ')[1];
        if (!token) {
            return res.status(401).json({ error: 'Token kh√¥ng h·ª£p l·ªá' });
        }

        // Gi·∫£i m√£ token
        let decoded;
        try {
            decoded = jwt.verify(token, "secretKey");
        } catch (err) {
            return res.status(401).json({ error: 'Token h·∫øt h·∫°n ho·∫∑c kh√¥ng h·ª£p l·ªá' });
        }

        // L·∫•y id c·ªßa user c·∫ßn ƒë·ªïi m·∫≠t kh·∫©u (th∆∞·ªùng truy·ªÅn qua params)
        const { id } = req.params;
        // L·∫•y m·∫≠t kh·∫©u hi·ªán t·∫°i (oldPassword) v√† m·∫≠t kh·∫©u m·ªõi (newPassword) t·ª´ body
        const { oldPassword, newPassword } = req.body;

        if (!newPassword) {
            return res.status(400).json({ error: 'M·∫≠t kh·∫©u m·ªõi kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng' });
        }

        // Ch·ªâ admin ho·∫∑c ch√≠nh ch·ªß m·ªõi ƒë∆∞·ª£c ph√©p ƒë·ªïi m·∫≠t kh·∫©u
        if (decoded.role !== "admin" && decoded.userId !== id) {
            return res.status(403).json({ error: 'B·∫°n kh√¥ng c√≥ quy·ªÅn ƒë·ªïi m·∫≠t kh·∫©u cho ng∆∞·ªùi d√πng n√†y' });
        }

        // T√¨m user theo id
        const user = await User.findById(id);
        if (!user) {
            return res.status(404).json({ error: 'Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i' });
        }

        // N·∫øu kh√¥ng ph·∫£i admin, c·∫ßn x√°c th·ª±c m·∫≠t kh·∫©u c≈©
        if (decoded.role !== "admin") {
            if (!oldPassword) {
                return res.status(400).json({ error: 'Vui l√≤ng cung c·∫•p m·∫≠t kh·∫©u hi·ªán t·∫°i' });
            }
            const isMatch = await user.comparePassword(oldPassword);
            if (!isMatch) {
                return res.status(400).json({ error: 'M·∫≠t kh·∫©u hi·ªán t·∫°i kh√¥ng ch√≠nh x√°c' });
            }
        }

        // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u m·ªõi (ƒë·∫£m b·∫£o r·∫±ng schema c·ªßa User s·∫Ω hash m·∫≠t kh·∫©u khi l∆∞u)
        user.password = newPassword;
        await user.save();

        return res.status(200).json({ message: 'ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng' });
    } catch (error) {
        console.error("Change password error:", error);
        return res.status(500).json({ error: "C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau." });
    }
};
