const cron = require('node-cron');
const axios = require('axios');
const Service = require('../../models/Service');
const SmmSv = require('../../models/SmmSv');

// H√†m ki·ªÉm tra v√† c·∫≠p nh·∫≠t gi√° d·ªãch v·ª•
async function updateServicePrices() {
  try {
    // L·∫•y to√†n b·ªô d·ªãch v·ª• trong CSDL
    const services = await Service.find({});
    console.log(`ƒêang ki·ªÉm tra ${services.length} d·ªãch v·ª•...`);

    // Duy·ªát qua t·ª´ng d·ªãch v·ª•
    for (const serviceItem of services) {
      try {
        // L·∫•y c·∫•u h√¨nh API theo DomainSmm c·ªßa d·ªãch v·ª• hi·ªán t·∫°i
        const smmSvConfig = await SmmSv.findOne({ name: serviceItem.DomainSmm });
        if (!smmSvConfig || !smmSvConfig.url_api || !smmSvConfig.api_token) {
          console.warn(`C·∫•u h√¨nh API ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p cho d·ªãch v·ª• ${serviceItem.name}`);
          continue;
        }

        // G·ªçi API b√™n th·ª© 3 ƒë·ªÉ l·∫•y danh s√°ch d·ªãch v·ª•
        const apiResponse = await axios.post(smmSvConfig.url_api, {
          key: smmSvConfig.api_token,
          action: 'services'
        });

        if (!apiResponse.data || !Array.isArray(apiResponse.data)) {
          console.warn(`D·ªØ li·ªáu API kh√¥ng h·ª£p l·ªá cho d·ªãch v·ª• ${serviceItem.name}`);
          continue;
        }

        // T√¨m d·ªãch v·ª• c√≥ serviceId t∆∞∆°ng ·ª©ng trong k·∫øt qu·∫£ API (√©p ki·ªÉu v·ªÅ Number n·∫øu c·∫ßn)
        const apiService = apiResponse.data.find(
          s => Number(s.service) === Number(serviceItem.serviceId)
        );
        if (!apiService) {
          console.warn(`Kh√¥ng t√¨m th·∫•y d·ªãch v·ª• ${serviceItem.serviceId} trong API cho ${serviceItem.name}`);
          continue;
        }

        // L·∫•y gi√° t·ª´ API v√† so s√°nh v·ªõi gi√° trong CSDL (l√†m tr√≤n 2 s·ªë th·∫≠p ph√¢n)
        const apiRate = parseFloat(apiService.rate * 25 .toFixed(2));
        const dbRate = parseFloat(serviceItem.rate.toFixed(2));

        console.log(`D·ªãch v·ª• ${serviceItem.name} - Gi√° DB: ${dbRate}, Gi√° API: ${apiRate}`);

        // N·∫øu gi√° trong CSDL th·∫•p h∆°n gi√° API th√¨ c·∫≠p nh·∫≠t
        if (dbRate < apiRate) {
          const newRate = parseFloat((apiRate * 1.1).toFixed(2)); // c·∫≠p nh·∫≠t v·ªõi 10% tƒÉng th√™m
           const giacu = serviceItem.rate 
          serviceItem.rate = newRate;
          await serviceItem.save();
          console.log(`ƒê√£ c·∫≠p nh·∫≠t gi√° c·ªßa ${serviceItem.name} th√†nh ${newRate}`);

          const taoluc = new Date();
          const telegramBotToken = process.env.TELEGRAM_BOT_TOKEN;
          const telegramChatId = process.env.TELEGRAM_CHAT_ID;
          if (telegramBotToken && telegramChatId) {
            const telegramMessage = `üìå *C·∫≠p nh·∫≠t gi√°!*\n\n` +
              `üë§ *message:* ƒê√£ c·∫≠p nh·∫≠t gi√° c·ªßa ${serviceItem.name} th√†nh ${newRate} gi√° c≈© ${giacu}.\n` +
              `üë§ *Site:* ${smmSvConfig.name} .\n` +
              `üîπ *T·∫°o l√∫c:* ${taoluc.toLocaleString()}\n`;
            try {
              await axios.post(`https://api.telegram.org/bot${telegramBotToken}/sendMessage`, {
                chat_id: telegramChatId,
                text: telegramMessage,
              });
              console.log('Th√¥ng b√°o Telegram ƒë√£ ƒë∆∞·ª£c g·ª≠i.');
            } catch (telegramError) {
              console.error('L·ªói g·ª≠i th√¥ng b√°o Telegram:', telegramError.message);
            }
          } else {
            console.log('Thi·∫øu th√¥ng tin c·∫•u h√¨nh Telegram.');
          }
        } else {
          console.log(`Gi√° c·ªßa ${serviceItem.name} ƒë√£ b·∫±ng ho·∫∑c cao h∆°n gi√° API, b·ªè qua c·∫≠p nh·∫≠t.`);
        }
      } catch (innerError) {
        console.error(`L·ªói khi x·ª≠ l√Ω d·ªãch v·ª• ${serviceItem.name}:`, innerError.message);
      }
    }
  } catch (error) {
    console.error("L·ªói khi l·∫•y danh s√°ch d·ªãch v·ª•:", error.message);
  }
}

setInterval(() => {
  console.log("Cron job: Ki·ªÉm tra gi√° d·ªãch v·ª• m·ªói 30 gi√¢y");
  updateServicePrices();
}, 30000); // 30,000 milliseconds = 30 seconds
